https://www.freecodecamp.org/news/write-your-own-promisify-function-from-scratch/

Direct practice towards network requests and file operations to prepare for real world 
situations.

// ==========================================================================

Promises Basics:
* Understand the concept of asynchronous operations and their challenges.
* Introduce the concept of promises as a structured way to handle 
  asynchronous tasks.
* Learn about the three states of promises: pending, fulfilled, and rejected.

// ==========================================================================

Creating Promises:
* Learn how to create a new promise using the Promise constructor.
* Understand the roles of the resolve and reject functions within a promise.
* Construct promises that simulate asynchronous tasks and their completion.

// ==========================================================================

Chaining Promises:
* Explore how to chain promises using the .then() method to perform sequential
  asynchronous operations.
* Understand how promise chaining enhances code readability and 
  maintainability.
* Handle data passing and transformation between chained promises.

// ==========================================================================

Error Handling:
* Study how to handle errors in promises using the .catch() method to catch 
  and handle rejections.
* Learn about error propagation in promise chains and how to prevent 
  unhandled promise rejections.
* Implement proper error-handling strategies to make code more robust.

// ==========================================================================

Promise API:
* Explore essential utility methods provided by promises, such as 
  Promise.all(), Promise.race(), and Promise.resolve().
* Understand how Promise.all() and Promise.race() work for managing multiple 
  promises.
* Learn how Promise.resolve() creates a resolved promise with a specified 
  value.

// ==========================================================================

Promisifying Callbacks:
* Understand the concept of promisification and its benefits.
* Learn techniques to convert callback-based functions into promise-based 
  functions.
* Apply promisification to existing callback-based APIs for improved 
  readability.

Handling Concurrency:
* Understand how promises help manage concurrent asynchronous operations 
  without creating callback hell.
* Explore scenarios where concurrent tasks, like making multiple API requests,
  can be managed efficiently.
* Learn about limitations and considerations when dealing with large numbers 
  of concurrent promises.

Real-World Use Cases:
* Apply promises to practical scenarios, such as making API requests using 
  the Fetch API or other libraries.
* Learn how to read and write files asynchronously using promises.
* Understand how to handle multiple asynchronous tasks simultaneously using 
  promises.

Promise Best Practices:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#common_mistakes
* Learn about common best practices when working with promises.
* Understand error handling techniques, including chaining .catch() and using 
  try/catch with async/await.
* Avoid callback hell by chaining promises and keeping code clean and 
  maintainable.
* Practice organizing asynchronous code using modularization and separation 
  of concerns.